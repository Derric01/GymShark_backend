const geminiClient = require('../utils/geminiClient');
const { asyncHandler } = require('../middlewares/errorHandler');
const { getHealthInsights } = require('../utils/bmiCalculator');

/**
 * @desc    Get AI-powered fitness tips
 * @route   POST /api/ai/tips
 * @access  Private
 */
const getFitnessTips = asyncHandler(async (req, res) => {
  const { specificRequest, focusArea } = req.body;
  const user = req.user;

  // Build user profile for AI
  const userProfile = {
    age: user.age,
    gender: user.gender,
    height: user.height,
    weight: user.weight,
    goal: user.goal,
    bmi: user.calculateBMI()
  };

  // Add focus area to request if provided
  let enhancedRequest = specificRequest;
  if (focusArea && !specificRequest) {
    enhancedRequest = `I want to focus on ${focusArea}. Please provide specific advice.`;
  } else if (focusArea && specificRequest) {
    enhancedRequest = `${specificRequest} (Focus area: ${focusArea})`;
  }

  try {
    const aiResponse = await geminiClient.getFitnessTips(userProfile, enhancedRequest);
    
    // Get health insights for additional context
    const healthInsights = getHealthInsights(userProfile);

    res.json({
      success: aiResponse.success,
      message: aiResponse.message || 'AI tips generated successfully',
      data: {
        tips: aiResponse.tips,
        userProfile: {
          goal: user.goal,
          bmi: userProfile.bmi,
          bmiCategory: healthInsights.bmi.category
        },
        focusArea,
        specificRequest,
        timestamp: aiResponse.timestamp || new Date().toISOString(),
        disclaimer: 'These AI-generated tips are for informational purposes only. Consult healthcare professionals for personalized medical advice.'
      }
    });
  } catch (error) {
    console.error('AI tips error:', error);
    res.status(500).json({
      success: false,
      message: 'Unable to generate AI tips at this time',
      data: {
        fallbackTips: [
          'Stay consistent with your workout routine',
          'Focus on progressive overload in strength training',
          'Ensure adequate protein intake for your goals',
          'Prioritize 7-9 hours of quality sleep',
          'Stay hydrated throughout the day',
          'Listen to your body and allow for rest days'
        ]
      }
    });
  }
});

/**
 * @desc    Get AI diet recommendations
 * @route   POST /api/ai/diet-advice
 * @access  Private
 */
const getDietAdvice = asyncHandler(async (req, res) => {
  const { dietGoal, specificQuestion, allergies, preferences } = req.body;
  const user = req.user;

  const userProfile = {
    age: user.age,
    gender: user.gender,
    height: user.height,
    weight: user.weight,
    goal: user.goal,
    bmi: user.calculateBMI()
  };

  const targetGoal = dietGoal || user.goal;

  try {
    const aiResponse = await geminiClient.getDietAdvice(userProfile, targetGoal);
    
    // Generate additional personalized advice
    const personalizedAdvice = generatePersonalizedDietAdvice(userProfile, {
      allergies,
      preferences,
      specificQuestion
    });

    res.json({
      success: aiResponse.success,
      message: aiResponse.message || 'Diet advice generated successfully',
      data: {
        aiAdvice: aiResponse.advice,
        personalizedAdvice,
        userContext: {
          goal: targetGoal,
          bmi: userProfile.bmi,
          allergies: allergies || [],
          preferences: preferences || []
        },
        specificQuestion,
        nutritionTips: getNutritionTips(targetGoal),
        disclaimer: 'This advice is generated by AI and should not replace professional nutritional counseling.'
      }
    });
  } catch (error) {
    console.error('AI diet advice error:', error);
    res.status(500).json({
      success: false,
      message: 'Unable to generate diet advice at this time',
      data: {
        fallbackAdvice: getFallbackDietAdvice(targetGoal)
      }
    });
  }
});

/**
 * @desc    Get workout suggestions based on user profile
 * @route   POST /api/ai/workout-suggestions
 * @access  Private
 */
const getWorkoutSuggestions = asyncHandler(async (req, res) => {
  const { 
    workoutType, 
    availableTime, 
    equipment, 
    experienceLevel,
    specificMuscleGroup 
  } = req.body;
  
  const user = req.user;

  // Build workout context
  const workoutContext = {
    userGoal: user.goal,
    age: user.age,
    experienceLevel: experienceLevel || 'beginner',
    availableTime: availableTime || 30,
    equipment: equipment || ['bodyweight'],
    workoutType: workoutType || 'full-body',
    specificMuscleGroup
  };

  const suggestions = generateWorkoutSuggestions(workoutContext);

  res.json({
    success: true,
    data: {
      workoutSuggestions: suggestions,
      context: workoutContext,
      tips: getWorkoutTips(workoutContext),
      safetyReminders: [
        'Always warm up before exercising',
        'Focus on proper form over heavy weights',
        'Stay hydrated during workouts',
        'Cool down and stretch after exercising',
        'Listen to your body and rest when needed'
      ]
    }
  });
});

/**
 * @desc    Get motivational content and goal-setting advice
 * @route   POST /api/ai/motivation
 * @access  Private
 */
const getMotivation = asyncHandler(async (req, res) => {
  const { currentMood, challenge, goalType } = req.body;
  const user = req.user;

  const motivationalContent = generateMotivationalContent(user, {
    currentMood,
    challenge,
    goalType
  });

  res.json({
    success: true,
    data: {
      motivation: motivationalContent,
      personalizedMessage: `Keep pushing towards your ${user.goal} goal, ${user.name}!`,
      dailyAffirmation: getDailyAffirmation(),
      challengeOfTheDay: getDailyChallenges(user.goal),
      progressReminder: 'Remember: Progress is not always linear. Every step forward counts!'
    }
  });
});

/**
 * @desc    Analyze user data and provide insights
 * @route   GET /api/ai/insights
 * @access  Private
 */
const getPersonalizedInsights = asyncHandler(async (req, res) => {
  const user = req.user;
  
  // Get recent progress data
  const Progress = require('../models/Progress');
  const recentProgress = await Progress.find({ userId: user._id })
    .sort({ date: -1 })
    .limit(10);

  // Get workout data
  const WorkoutPlan = require('../models/WorkoutPlan');
  const workoutCount = await WorkoutPlan.countDocuments({ 
    userId: user._id, 
    isActive: true 
  });

  const insights = generatePersonalizedInsights(user, {
    recentProgress,
    workoutCount
  });

  res.json({
    success: true,
    data: {
      insights,
      recommendations: insights.recommendations,
      nextSteps: insights.nextSteps,
      analysisDate: new Date().toISOString()
    }
  });
});

// Helper Functions

function generatePersonalizedDietAdvice(userProfile, context) {
  const advice = [];
  const { allergies, preferences, specificQuestion } = context;

  // BMI-based advice
  if (userProfile.bmi < 18.5) {
    advice.push('Focus on calorie-dense, nutrient-rich foods to support healthy weight gain');
  } else if (userProfile.bmi > 25) {
    advice.push('Consider portion control and focus on nutrient-dense, lower-calorie foods');
  }

  // Goal-based advice
  if (userProfile.goal === 'muscle gain') {
    advice.push(`Aim for ${Math.round(userProfile.weight * 1.6)}-${Math.round(userProfile.weight * 2.2)}g protein daily`);
    advice.push('Time protein intake around your workouts for optimal muscle synthesis');
  }

  // Age-based advice
  if (userProfile.age > 40) {
    advice.push('Focus on anti-inflammatory foods and ensure adequate calcium and vitamin D');
  }

  // Handle allergies and preferences
  if (allergies && allergies.length > 0) {
    advice.push(`Avoid foods containing: ${allergies.join(', ')}. Focus on safe alternatives.`);
  }

  if (preferences && preferences.includes('vegetarian')) {
    advice.push('Combine different protein sources to ensure complete amino acid profiles');
  }

  return advice;
}

function getNutritionTips(goal) {
  const tips = {
    'weight loss': [
      'Create a moderate caloric deficit (300-500 calories)',
      'Increase fiber intake to improve satiety',
      'Choose lean proteins to preserve muscle mass',
      'Stay hydrated - sometimes thirst masquerades as hunger'
    ],
    'muscle gain': [
      'Eat in a slight caloric surplus (200-500 calories)',
      'Distribute protein evenly throughout the day',
      'Include complex carbohydrates around workouts',
      'Don\'t neglect healthy fats for hormone production'
    ],
    'maintenance': [
      'Focus on nutrient density over calorie counting',
      'Follow the 80/20 rule - healthy choices 80% of the time',
      'Listen to hunger and satiety cues',
      'Maintain consistent meal timing'
    ]
  };

  return tips[goal] || tips['maintenance'];
}

function getFallbackDietAdvice(goal) {
  return [
    'Eat a variety of colorful fruits and vegetables',
    'Choose whole grains over refined grains',
    'Include lean protein sources in each meal',
    'Stay adequately hydrated throughout the day',
    'Practice mindful eating and portion control'
  ];
}

function generateWorkoutSuggestions(context) {
  const { userGoal, availableTime, equipment, experienceLevel, specificMuscleGroup } = context;

  const suggestions = {
    exercises: [],
    structure: {},
    tips: []
  };

  // Basic exercise suggestions based on equipment
  if (equipment.includes('bodyweight')) {
    suggestions.exercises.push(
      { name: 'Push-ups', sets: '3', reps: '10-15', target: 'Chest, shoulders, triceps' },
      { name: 'Squats', sets: '3', reps: '12-20', target: 'Legs, glutes' },
      { name: 'Plank', sets: '3', duration: '30-60 seconds', target: 'Core' }
    );
  }

  if (equipment.includes('dumbbells')) {
    suggestions.exercises.push(
      { name: 'Dumbbell rows', sets: '3', reps: '10-12', target: 'Back, biceps' },
      { name: 'Overhead press', sets: '3', reps: '8-12', target: 'Shoulders' },
      { name: 'Lunges', sets: '3', reps: '10 each leg', target: 'Legs, glutes' }
    );
  }

  // Workout structure based on available time
  if (availableTime <= 20) {
    suggestions.structure = {
      warmup: '3-5 minutes',
      mainWorkout: '12-15 minutes',
      cooldown: '2-3 minutes',
      format: 'Circuit training for time efficiency'
    };
  } else if (availableTime <= 45) {
    suggestions.structure = {
      warmup: '5-7 minutes',
      mainWorkout: '25-35 minutes',
      cooldown: '5 minutes',
      format: 'Traditional sets and reps with adequate rest'
    };
  }

  return suggestions;
}

function getWorkoutTips(context) {
  const tips = [];
  
  if (context.experienceLevel === 'beginner') {
    tips.push('Start with bodyweight exercises to master form');
    tips.push('Focus on consistency over intensity');
  }

  if (context.availableTime < 30) {
    tips.push('Use compound movements to work multiple muscle groups');
    tips.push('Consider high-intensity interval training (HIIT)');
  }

  tips.push('Progressive overload is key to continued improvement');
  tips.push('Don\'t neglect rest days for recovery');

  return tips;
}

function generateMotivationalContent(user, context) {
  const { currentMood, challenge } = context;
  
  const content = {
    message: '',
    quote: '',
    actionStep: ''
  };

  // Mood-based motivation
  if (currentMood === 'tired') {
    content.message = 'Rest is productive too! Listen to your body and recover properly.';
    content.actionStep = 'Consider a light walk or gentle stretching today.';
  } else if (currentMood === 'motivated') {
    content.message = 'Great energy! Channel this motivation into your workout or meal prep.';
    content.actionStep = 'Set a specific goal for today and crush it!';
  } else {
    content.message = `Remember why you started your ${user.goal} journey, ${user.name}.`;
    content.actionStep = 'Take one small action today towards your goal.';
  }

  content.quote = getInspirationalQuote();

  return content;
}

function getDailyAffirmation() {
  const affirmations = [
    'I am committed to my health and well-being.',
    'Every workout makes me stronger.',
    'I choose nutritious foods that fuel my body.',
    'Progress, not perfection, is my goal.',
    'I am capable of achieving my fitness goals.',
    'My body is strong and resilient.',
    'I make healthy choices because I love myself.'
  ];

  return affirmations[Math.floor(Math.random() * affirmations.length)];
}

function getDailyChallenges(goal) {
  const challenges = {
    'weight loss': [
      'Drink 8 glasses of water today',
      'Take a 10-minute walk after each meal',
      'Replace one snack with a piece of fruit'
    ],
    'muscle gain': [
      'Add 5 more reps to one exercise today',
      'Include protein in every meal',
      'Get 8 hours of sleep tonight'
    ],
    'maintenance': [
      'Try a new healthy recipe',
      'Do 50 bodyweight squats throughout the day',
      'Practice 5 minutes of mindfulness'
    ]
  };

  const goalChallenges = challenges[goal] || challenges['maintenance'];
  return goalChallenges[Math.floor(Math.random() * goalChallenges.length)];
}

function getInspirationalQuote() {
  const quotes = [
    'The body achieves what the mind believes.',
    'Strength doesn\'t come from what you can do. It comes from overcoming the things you thought you couldn\'t.',
    'Take care of your body. It\'s the only place you have to live.',
    'Your only limit is your mind.',
    'Progress is impossible without change.'
  ];

  return quotes[Math.floor(Math.random() * quotes.length)];
}

function generatePersonalizedInsights(user, data) {
  const { recentProgress, workoutCount } = data;
  
  const insights = {
    summary: [],
    recommendations: [],
    nextSteps: []
  };

  // Progress analysis
  if (recentProgress.length > 0) {
    const latestWeight = recentProgress[0].weight;
    const oldestWeight = recentProgress[recentProgress.length - 1]?.weight;
    
    if (oldestWeight && latestWeight !== oldestWeight) {
      const change = latestWeight - oldestWeight;
      if (change < 0) {
        insights.summary.push(`You've lost ${Math.abs(change).toFixed(1)}kg recently - great progress!`);
      } else {
        insights.summary.push(`Weight has increased by ${change.toFixed(1)}kg - monitor your nutrition.`);
      }
    }
  }

  // Workout analysis
  if (workoutCount === 0) {
    insights.recommendations.push('Create your first workout plan to start your fitness journey');
    insights.nextSteps.push('Browse our workout templates or create a custom plan');
  } else if (workoutCount < 3) {
    insights.recommendations.push('Consider adding more variety to your workout routine');
  }

  // General recommendations based on goal
  if (user.goal === 'weight loss') {
    insights.recommendations.push('Focus on creating a sustainable caloric deficit');
    insights.nextSteps.push('Track your food intake for better awareness');
  }

  return insights;
}

module.exports = {
  getFitnessTips,
  getDietAdvice,
  getWorkoutSuggestions,
  getMotivation,
  getPersonalizedInsights
};
